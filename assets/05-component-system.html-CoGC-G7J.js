import{_ as s,c as a,a as p,o as e}from"./app-BYt8acor.js";const t={};function o(l,n){return e(),a("div",null,n[0]||(n[0]=[p(`<h1 id="vue3组件系统详解" tabindex="-1"><a class="header-anchor" href="#vue3组件系统详解"><span>Vue3组件系统详解</span></a></h1><h2 id="🎯-组件系统概述" tabindex="-1"><a class="header-anchor" href="#🎯-组件系统概述"><span>🎯 组件系统概述</span></a></h2><p>Vue3的组件系统是框架的核心抽象层，它提供了组件定义、注册、渲染和生命周期管理的完整解决方案。</p><h3 id="组件系统架构图" tabindex="-1"><a class="header-anchor" href="#组件系统架构图"><span>组件系统架构图</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">┌─────────────────────────────────────┐</span>
<span class="line">│        组件定义层 (Definition)      │</span>
<span class="line">│  defineComponent() | 类组件 | 函数组件│</span>
<span class="line">├─────────────────────────────────────┤</span>
<span class="line">│        组件注册层 (Registration)    │</span>
<span class="line">│  app.component() | 全局 | 局部      │</span>
<span class="line">├─────────────────────────────────────┤</span>
<span class="line">│        组件渲染层 (Rendering)       │</span>
<span class="line">│  mount() | patch() | update()       │</span>
<span class="line">├─────────────────────────────────────┤</span>
<span class="line">│        生命周期层 (Lifecycle)       │</span>
<span class="line">│  setup() | mounted() | unmounted()  │</span>
<span class="line">└─────────────────────────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🏗️-组件定义" tabindex="-1"><a class="header-anchor" href="#🏗️-组件定义"><span>🏗️ 组件定义</span></a></h2><h3 id="_1-组件类型" tabindex="-1"><a class="header-anchor" href="#_1-组件类型"><span>1. 组件类型</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 组件类型定义</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">Component</span> <span class="token operator">=</span></span>
<span class="line">  <span class="token operator">|</span> ComponentOptions</span>
<span class="line">  <span class="token operator">|</span> FunctionalComponent</span>
<span class="line">  <span class="token operator">|</span> ComponentPublicInstanceConstructor</span>
<span class="line"></span>
<span class="line"><span class="token comment">// 组件选项</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ComponentOptions</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  components<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Component<span class="token operator">&gt;</span></span>
<span class="line">  directives<span class="token operator">?</span><span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Directive<span class="token operator">&gt;</span></span>
<span class="line">  inheritAttrs<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  emits<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span>
<span class="line">  setup<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span></span>
<span class="line">    props<span class="token operator">:</span> Readonly<span class="token operator">&lt;</span>LooseRequired<span class="token operator">&lt;</span>Props<span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line">    ctx<span class="token operator">:</span> SetupContext<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> RenderFunction <span class="token operator">|</span> object <span class="token operator">|</span> <span class="token keyword">void</span></span>
<span class="line">  template<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  render<span class="token operator">?</span><span class="token operator">:</span> RenderFunction</span>
<span class="line">  <span class="token comment">// ... 更多选项</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 函数式组件</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">FunctionalComponent<span class="token operator">&lt;</span>Props <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Emits <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> Slots <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token operator">&gt;</span></span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">(</span>props<span class="token operator">:</span> Props<span class="token punctuation">,</span> ctx<span class="token operator">:</span> SetupContext<span class="token operator">&lt;</span>Emits<span class="token punctuation">,</span> Slots<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> VNodeChild</span>
<span class="line">  displayName<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  inheritAttrs<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  props<span class="token operator">?</span><span class="token operator">:</span> ComponentPropsOptions<span class="token operator">&lt;</span>Props<span class="token operator">&gt;</span></span>
<span class="line">  emits<span class="token operator">?</span><span class="token operator">:</span> ComponentEmitsOptions<span class="token operator">&lt;</span>Emits<span class="token operator">&gt;</span></span>
<span class="line">  slots<span class="token operator">?</span><span class="token operator">:</span> SlotsType<span class="token operator">&lt;</span>Slots<span class="token operator">&gt;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-definecomponent" tabindex="-1"><a class="header-anchor" href="#_2-definecomponent"><span>2. defineComponent</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// defineComponent函数</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">defineComponent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> ComponentOptions<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>options<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">defineComponent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> ComponentOptions<span class="token punctuation">,</span> RawBindings<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">  options<span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">&amp;</span> ThisType<span class="token operator">&lt;</span>CreateComponentPublicInstance<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> RawBindings<span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">defineComponent</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> ComponentOptions<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">  setup<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">[</span><span class="token string">&#39;setup&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  extraOptions<span class="token operator">?</span><span class="token operator">:</span> Omit<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token string">&#39;setup&#39;</span><span class="token operator">&gt;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用示例</span></span>
<span class="line"><span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token string">&#39;MyComponent&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  props<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    message<span class="token operator">:</span> String<span class="token punctuation">,</span></span>
<span class="line">    count<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      type<span class="token operator">:</span> Number<span class="token punctuation">,</span></span>
<span class="line">      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  emits<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;update&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token punctuation">{</span> emit <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">increment</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;update&#39;</span><span class="token punctuation">,</span> props<span class="token punctuation">.</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">      increment<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  template<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string"></span>
<span class="line">    &lt;div&gt;</span>
<span class="line">      &lt;p&gt;{{ message }}&lt;/p&gt;</span>
<span class="line">      &lt;p&gt;Count: {{ count }}&lt;/p&gt;</span>
<span class="line">      &lt;button @click=&quot;increment&quot;&gt;Increment&lt;/button&gt;</span>
<span class="line">    &lt;/div&gt;</span>
<span class="line">  </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🔧-组件实例" tabindex="-1"><a class="header-anchor" href="#🔧-组件实例"><span>🔧 组件实例</span></a></h2><h3 id="_1-组件内部实例" tabindex="-1"><a class="header-anchor" href="#_1-组件内部实例"><span>1. 组件内部实例</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 组件内部实例接口</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ComponentInternalInstance</span> <span class="token punctuation">{</span></span>
<span class="line">  uid<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  type<span class="token operator">:</span> ConcreteComponent</span>
<span class="line">  parent<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  root<span class="token operator">:</span> ComponentInternalInstance</span>
<span class="line">  appContext<span class="token operator">:</span> AppContext</span>
<span class="line">  vnode<span class="token operator">:</span> VNode</span>
<span class="line">  next<span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  subTree<span class="token operator">:</span> VNode</span>
<span class="line">  update<span class="token operator">:</span> ReactiveEffect</span>
<span class="line">  scope<span class="token operator">:</span> EffectScope</span>
<span class="line">  render<span class="token operator">:</span> InternalRenderFunction</span>
<span class="line">  proxy<span class="token operator">:</span> ComponentPublicInstance <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  exposed<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  exposeProxy<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  withProxy<span class="token operator">:</span> ComponentPublicInstance <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  provides<span class="token operator">:</span> Data</span>
<span class="line">  accessCache<span class="token operator">:</span> Data <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  renderCache<span class="token operator">:</span> <span class="token punctuation">(</span>VNode <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  components<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Component<span class="token operator">&gt;</span></span>
<span class="line">  directives<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> Directive<span class="token operator">&gt;</span></span>
<span class="line">  filters<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">Function</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span></span>
<span class="line">  propsOptions<span class="token operator">:</span> NormalizedPropsOptions</span>
<span class="line">  emitsOptions<span class="token operator">:</span> NormalizedEmitsOptions <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  emit<span class="token operator">:</span> EmitFn <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  emitted<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  attrs<span class="token operator">:</span> Data</span>
<span class="line">  slots<span class="token operator">:</span> InternalSlots</span>
<span class="line">  refs<span class="token operator">:</span> Data</span>
<span class="line">  setupState<span class="token operator">:</span> Data</span>
<span class="line">  setupContext<span class="token operator">:</span> SetupContext <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  ctx<span class="token operator">:</span> Data</span>
<span class="line">  data<span class="token operator">:</span> Data</span>
<span class="line">  props<span class="token operator">:</span> Data</span>
<span class="line">  attrs<span class="token operator">:</span> Data</span>
<span class="line">  slots<span class="token operator">:</span> InternalSlots</span>
<span class="line">  refs<span class="token operator">:</span> Data</span>
<span class="line">  parent<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  appContext<span class="token operator">:</span> AppContext</span>
<span class="line">  emit<span class="token operator">:</span> EmitFn</span>
<span class="line">  update<span class="token operator">:</span> ReactiveEffect</span>
<span class="line">  isUnmounted<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  isDeactivated<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">BEFORE_CREATE</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">CREATED</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">BEFORE_MOUNT</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">MOUNTED</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">BEFORE_UPDATE</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">UPDATED</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">BEFORE_UNMOUNT</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">UNMOUNTED</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">ACTIVATED</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">DEACTIVATED</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">ERROR_CAPTURED</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">RENDER_TRACKED</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">RENDER_TRIGGERED</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">SERVER_PREFETCH</span><span class="token punctuation">]</span><span class="token operator">:</span> LifecycleHook<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-组件公共实例" tabindex="-1"><a class="header-anchor" href="#_2-组件公共实例"><span>2. 组件公共实例</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 组件公共实例接口</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ComponentPublicInstance<span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">P</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">B</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">D</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">C</span> <span class="token keyword">extends</span> ComputedOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">M</span> <span class="token keyword">extends</span> MethodOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">E</span> <span class="token keyword">extends</span> EmitsOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  PublicProps <span class="token operator">=</span> <span class="token constant">P</span><span class="token punctuation">,</span></span>
<span class="line">  Defaults <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  MakeDefaultsOptional <span class="token keyword">extends</span> <span class="token builtin">boolean</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">  Options <span class="token operator">=</span> ComponentOptions<span class="token punctuation">,</span></span>
<span class="line"><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">  $<span class="token operator">:</span> ComponentInternalInstance</span>
<span class="line">  $data<span class="token operator">:</span> <span class="token constant">D</span></span>
<span class="line">  $props<span class="token operator">:</span> MakeDefaultsOptional <span class="token keyword">extends</span> <span class="token class-name"><span class="token boolean">true</span></span> <span class="token operator">?</span> Partial<span class="token operator">&lt;</span>Defaults<span class="token operator">&gt;</span> <span class="token operator">&amp;</span> <span class="token constant">P</span> <span class="token operator">:</span> <span class="token constant">P</span></span>
<span class="line">  $attrs<span class="token operator">:</span> Data</span>
<span class="line">  $refs<span class="token operator">:</span> Data</span>
<span class="line">  $slots<span class="token operator">:</span> Slots</span>
<span class="line">  $root<span class="token operator">:</span> ComponentPublicInstance <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  $parent<span class="token operator">:</span> ComponentPublicInstance <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line">  $emit<span class="token operator">:</span> EmitFn<span class="token operator">&lt;</span><span class="token constant">E</span><span class="token operator">&gt;</span></span>
<span class="line">  $el<span class="token operator">:</span> <span class="token builtin">any</span></span>
<span class="line">  $options<span class="token operator">:</span> Options <span class="token operator">&amp;</span> MergedComponentOptionsOverride</span>
<span class="line">  <span class="token function">$forceUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token function">$nextTick</span><span class="token punctuation">(</span>fn<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token function">$watch</span><span class="token punctuation">(</span></span>
<span class="line">    source<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">Function</span><span class="token punctuation">,</span></span>
<span class="line">    cb<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span></span>
<span class="line">    options<span class="token operator">?</span><span class="token operator">:</span> WatchOptions<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span><span class="token operator">:</span> WatchStopHandle</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🎛️-组件渲染" tabindex="-1"><a class="header-anchor" href="#🎛️-组件渲染"><span>🎛️ 组件渲染</span></a></h2><h3 id="_1-组件渲染流程" tabindex="-1"><a class="header-anchor" href="#_1-组件渲染流程"><span>1. 组件渲染流程</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 组件渲染函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">renderComponentRoot</span><span class="token punctuation">(</span>instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">)</span><span class="token operator">:</span> VNode <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    type<span class="token operator">:</span> Component<span class="token punctuation">,</span></span>
<span class="line">    vnode<span class="token punctuation">,</span></span>
<span class="line">    proxy<span class="token punctuation">,</span></span>
<span class="line">    withProxy<span class="token punctuation">,</span></span>
<span class="line">    props<span class="token punctuation">,</span></span>
<span class="line">    slots<span class="token punctuation">,</span></span>
<span class="line">    attrs<span class="token punctuation">,</span></span>
<span class="line">    emit<span class="token punctuation">,</span></span>
<span class="line">    render<span class="token punctuation">,</span></span>
<span class="line">    renderCache<span class="token punctuation">,</span></span>
<span class="line">    data<span class="token punctuation">,</span></span>
<span class="line">    setupState<span class="token punctuation">,</span></span>
<span class="line">    ctx<span class="token punctuation">,</span></span>
<span class="line">    inheritAttrs<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token operator">=</span> instance</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> result<span class="token operator">:</span> VNode</span>
<span class="line">  <span class="token keyword">let</span> fallthroughAttrs<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">try</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 有状态组件</span></span>
<span class="line">      <span class="token keyword">const</span> proxyToUse <span class="token operator">=</span> withProxy <span class="token operator">||</span> proxy</span>
<span class="line">      result <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span></span>
<span class="line">        render<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span></span>
<span class="line">          proxyToUse<span class="token punctuation">,</span></span>
<span class="line">          proxyToUse<span class="token operator">!</span><span class="token punctuation">,</span></span>
<span class="line">          renderCache<span class="token punctuation">,</span></span>
<span class="line">          props<span class="token punctuation">,</span></span>
<span class="line">          setupState<span class="token punctuation">,</span></span>
<span class="line">          data<span class="token punctuation">,</span></span>
<span class="line">          ctx<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line">      fallthroughAttrs <span class="token operator">=</span> inheritAttrs <span class="token operator">!==</span> <span class="token boolean">false</span> <span class="token operator">?</span> attrs <span class="token operator">:</span> <span class="token keyword">undefined</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 函数式组件</span></span>
<span class="line">      <span class="token keyword">const</span> render <span class="token operator">=</span> Component <span class="token keyword">as</span> FunctionalComponent</span>
<span class="line">      result <span class="token operator">=</span> <span class="token function">normalizeVNode</span><span class="token punctuation">(</span></span>
<span class="line">        render<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span></span>
<span class="line">          <span class="token operator">?</span> <span class="token function">render</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token punctuation">{</span> attrs<span class="token punctuation">,</span> slots<span class="token punctuation">,</span> emit <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token operator">:</span> <span class="token function">render</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line">      fallthroughAttrs <span class="token operator">=</span> attrs</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">RENDER_FUNCTION</span><span class="token punctuation">)</span></span>
<span class="line">    result <span class="token operator">=</span> <span class="token function">createVNode</span><span class="token punctuation">(</span>Comment<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 处理fallthrough属性</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>fallthroughAttrs <span class="token operator">&amp;&amp;</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>fallthroughAttrs<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      result<span class="token punctuation">.</span>props <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>result<span class="token punctuation">.</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>fallthroughAttrs <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        result<span class="token punctuation">.</span>props <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>result<span class="token punctuation">.</span>props<span class="token punctuation">,</span> <span class="token operator">...</span>fallthroughAttrs <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        result<span class="token punctuation">.</span>props <span class="token operator">=</span> fallthroughAttrs</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> result</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-组件挂载" tabindex="-1"><a class="header-anchor" href="#_2-组件挂载"><span>2. 组件挂载</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 组件挂载流程</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span></span>
<span class="line">  vnode<span class="token operator">:</span> VNode<span class="token punctuation">,</span></span>
<span class="line">  container<span class="token operator">:</span> RendererElement<span class="token punctuation">,</span></span>
<span class="line">  anchor<span class="token operator">:</span> RendererNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  parentComponent<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  parentSuspense<span class="token operator">:</span> SuspenseBoundary <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  namespace<span class="token operator">:</span> ElementNamespace<span class="token punctuation">,</span></span>
<span class="line">  slotScopeIds<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  optimized<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> instance<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>component <span class="token operator">=</span></span>
<span class="line">    <span class="token function">createComponentInstance</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> parentComponent<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>__hmrId<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">registerHMR</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 注入插件数据</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>inheritAttrs <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">inheritAttrs</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 设置组件实例</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>type<span class="token punctuation">.</span>setup<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> setupResult <span class="token operator">=</span> <span class="token function">callSetup</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      instance<span class="token punctuation">.</span>render <span class="token operator">=</span> setupResult <span class="token keyword">as</span> InternalRenderFunction</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      instance<span class="token punctuation">.</span>setupState <span class="token operator">=</span> <span class="token function">proxyRefs</span><span class="token punctuation">(</span>setupResult<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>render<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 创建渲染effect</span></span>
<span class="line">    instance<span class="token punctuation">.</span>update <span class="token operator">=</span> <span class="token function">effect</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token keyword">function</span> <span class="token function">componentEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 首次挂载</span></span>
<span class="line">          <span class="token function">mountComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 更新</span></span>
<span class="line">          <span class="token function">updateComponent</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      __DEV__ <span class="token operator">?</span> <span class="token function">createDevEffectOptions</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span> <span class="token operator">:</span> prodEffectOptions<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🔄-生命周期" tabindex="-1"><a class="header-anchor" href="#🔄-生命周期"><span>🔄 生命周期</span></a></h2><h3 id="_1-生命周期钩子" tabindex="-1"><a class="header-anchor" href="#_1-生命周期钩子"><span>1. 生命周期钩子</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 生命周期钩子枚举</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">enum</span> LifecycleHooks <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">BEFORE_CREATE</span> <span class="token operator">=</span> <span class="token string">&#39;bc&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">CREATED</span> <span class="token operator">=</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">BEFORE_MOUNT</span> <span class="token operator">=</span> <span class="token string">&#39;bm&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">MOUNTED</span> <span class="token operator">=</span> <span class="token string">&#39;m&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">BEFORE_UPDATE</span> <span class="token operator">=</span> <span class="token string">&#39;bu&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">UPDATED</span> <span class="token operator">=</span> <span class="token string">&#39;u&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">BEFORE_UNMOUNT</span> <span class="token operator">=</span> <span class="token string">&#39;bum&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">UNMOUNTED</span> <span class="token operator">=</span> <span class="token string">&#39;um&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">ACTIVATED</span> <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">DEACTIVATED</span> <span class="token operator">=</span> <span class="token string">&#39;da&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">ERROR_CAPTURED</span> <span class="token operator">=</span> <span class="token string">&#39;ec&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">RENDER_TRACKED</span> <span class="token operator">=</span> <span class="token string">&#39;rtc&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">RENDER_TRIGGERED</span> <span class="token operator">=</span> <span class="token string">&#39;rtg&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">SERVER_PREFETCH</span> <span class="token operator">=</span> <span class="token string">&#39;sp&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 生命周期钩子类型</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">LifecycleHook</span> <span class="token operator">=</span> <span class="token builtin">Function</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 注册生命周期钩子</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">onBeforeMount</span><span class="token punctuation">(</span></span>
<span class="line">  hook<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span></span>
<span class="line">  target<span class="token operator">?</span><span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    target <span class="token operator">=</span> currentInstance</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">addHook</span><span class="token punctuation">(</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">BEFORE_MOUNT</span><span class="token punctuation">,</span> hook<span class="token punctuation">,</span> target<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">onMounted</span><span class="token punctuation">(</span></span>
<span class="line">  hook<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span></span>
<span class="line">  target<span class="token operator">?</span><span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    target <span class="token operator">=</span> currentInstance</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">addHook</span><span class="token punctuation">(</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">MOUNTED</span><span class="token punctuation">,</span> hook<span class="token punctuation">,</span> target<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 添加钩子</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">addHook</span><span class="token punctuation">(</span></span>
<span class="line">  type<span class="token operator">:</span> LifecycleHooks<span class="token punctuation">,</span></span>
<span class="line">  hook<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span></span>
<span class="line">  target<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> currentInstance<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> hooks <span class="token operator">=</span> target<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">(</span>target<span class="token punctuation">[</span>type<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> wrappedHook <span class="token operator">=</span> hook<span class="token punctuation">.</span>__weh <span class="token operator">||</span> hook</span>
<span class="line">    hooks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>wrappedHook<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-生命周期执行" tabindex="-1"><a class="header-anchor" href="#_2-生命周期执行"><span>2. 生命周期执行</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 执行生命周期钩子</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">callHook</span><span class="token punctuation">(</span></span>
<span class="line">  hook<span class="token operator">:</span> LifecycleHook<span class="token punctuation">,</span></span>
<span class="line">  instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span></span>
<span class="line">  type<span class="token operator">:</span> LifecycleHooks<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>hook<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> args <span class="token operator">=</span> type <span class="token operator">===</span> LifecycleHooks<span class="token punctuation">.</span><span class="token constant">BEFORE_CREATE</span> <span class="token operator">?</span> <span class="token punctuation">[</span>instance<span class="token punctuation">.</span>proxy<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token function">callWithAsyncErrorHandling</span><span class="token punctuation">(</span>hook<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> type<span class="token punctuation">,</span> args<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 组件创建</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createComponentInstance</span><span class="token punctuation">(</span></span>
<span class="line">  vnode<span class="token operator">:</span> VNode<span class="token punctuation">,</span></span>
<span class="line">  parent<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  suspense<span class="token operator">:</span> SuspenseBoundary <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> ComponentInternalInstance <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> type <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">as</span></span> ConcreteComponent</span>
<span class="line">  <span class="token keyword">const</span> appContext <span class="token operator">=</span></span>
<span class="line">    <span class="token punctuation">(</span>parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>appContext <span class="token operator">:</span> vnode<span class="token punctuation">.</span>appContext<span class="token punctuation">)</span> <span class="token operator">||</span> emptyAppContext</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> instance<span class="token operator">:</span> ComponentInternalInstance <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    uid<span class="token operator">:</span> uid<span class="token operator">++</span><span class="token punctuation">,</span></span>
<span class="line">    vnode<span class="token punctuation">,</span></span>
<span class="line">    type<span class="token punctuation">,</span></span>
<span class="line">    parent<span class="token punctuation">,</span></span>
<span class="line">    appContext<span class="token punctuation">,</span></span>
<span class="line">    root<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token comment">// to be immediately set</span></span>
<span class="line">    next<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    subTree<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token comment">// will be set synchronously right after creation</span></span>
<span class="line">    update<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token comment">// will be set synchronously right after creation</span></span>
<span class="line">    scope<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">EffectScope</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token comment">/* detached */</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    render<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    proxy<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    exposed<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    exposeProxy<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    withProxy<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    provides<span class="token operator">:</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>provides <span class="token operator">:</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>appContext<span class="token punctuation">.</span>provides<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    accessCache<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span></span>
<span class="line">    renderCache<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    components<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    directives<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    filters<span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">    propsOptions<span class="token operator">:</span> <span class="token function">normalizePropsOptions</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> appContext<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    emitsOptions<span class="token operator">:</span> <span class="token function">normalizeEmitsOptions</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> appContext<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    emit<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span> <span class="token comment">// to be set immediately</span></span>
<span class="line">    emitted<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    attrs<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span></span>
<span class="line">    slots<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span></span>
<span class="line">    refs<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span></span>
<span class="line">    setupState<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span></span>
<span class="line">    setupContext<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    ctx<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span></span>
<span class="line">    data<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span></span>
<span class="line">    props<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span></span>
<span class="line">    attrs<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span></span>
<span class="line">    slots<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span></span>
<span class="line">    refs<span class="token operator">:</span> <span class="token constant">EMPTY_OBJ</span><span class="token punctuation">,</span></span>
<span class="line">    parent<span class="token operator">:</span> parent<span class="token punctuation">,</span></span>
<span class="line">    appContext<span class="token operator">:</span> appContext<span class="token punctuation">,</span></span>
<span class="line">    emit<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span></span>
<span class="line">    update<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span></span>
<span class="line">    isUnmounted<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    isDeactivated<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">BEFORE_CREATE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">CREATED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">BEFORE_MOUNT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">MOUNTED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">BEFORE_UPDATE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">UPDATED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">BEFORE_UNMOUNT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">UNMOUNTED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">ACTIVATED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">DEACTIVATED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">ERROR_CAPTURED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">RENDER_TRACKED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">RENDER_TRIGGERED</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">[</span>LifecycleHooks<span class="token punctuation">.</span><span class="token constant">SERVER_PREFETCH</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 设置根实例</span></span>
<span class="line">  instance<span class="token punctuation">.</span>root <span class="token operator">=</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>root <span class="token operator">:</span> instance</span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 设置emit函数</span></span>
<span class="line">  instance<span class="token punctuation">.</span>emit <span class="token operator">=</span> <span class="token function">emit</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> instance<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> instance</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🎯-组件通信" tabindex="-1"><a class="header-anchor" href="#🎯-组件通信"><span>🎯 组件通信</span></a></h2><h3 id="_1-props传递" tabindex="-1"><a class="header-anchor" href="#_1-props传递"><span>1. Props传递</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// Props规范化</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">normalizePropsOptions</span><span class="token punctuation">(</span></span>
<span class="line">  comp<span class="token operator">:</span> ConcreteComponent<span class="token punctuation">,</span></span>
<span class="line">  appContext<span class="token operator">:</span> AppContext<span class="token punctuation">,</span></span>
<span class="line">  asMixin <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> NormalizedPropsOptions <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> cache <span class="token operator">=</span> appContext<span class="token punctuation">.</span>propsCache</span>
<span class="line">  <span class="token keyword">const</span> cached <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>comp<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>cached<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> cached</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> raw <span class="token operator">=</span> comp<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">const</span> normalized<span class="token operator">:</span> NormalizedPropsOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">const</span> needCastKeys<span class="token operator">:</span> NormalizedPropsOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 处理数组形式的props</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>raw<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> raw<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>raw<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      normalized<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant">EMPTY_OBJ</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>raw<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> raw<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> normalizedKey <span class="token operator">=</span> <span class="token function">camelize</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">const</span> opt <span class="token operator">=</span> raw<span class="token punctuation">[</span>key<span class="token punctuation">]</span></span>
<span class="line">      <span class="token keyword">const</span> prop<span class="token operator">:</span> NormalizedProp <span class="token operator">=</span> <span class="token punctuation">(</span>normalized<span class="token punctuation">[</span>normalizedKey<span class="token punctuation">]</span> <span class="token operator">=</span></span>
<span class="line">        <span class="token function">isArray</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">{</span> type<span class="token operator">:</span> opt <span class="token punctuation">}</span> <span class="token operator">:</span> opt<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> booleanIndex <span class="token operator">=</span> <span class="token function">getTypeIndex</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">const</span> stringIndex <span class="token operator">=</span> <span class="token function">getTypeIndex</span><span class="token punctuation">(</span>String<span class="token punctuation">,</span> prop<span class="token punctuation">.</span>type<span class="token punctuation">)</span></span>
<span class="line">        prop<span class="token punctuation">[</span>BooleanFlags<span class="token punctuation">.</span>shouldCast<span class="token punctuation">]</span> <span class="token operator">=</span> booleanIndex <span class="token operator">&gt;</span> stringIndex</span>
<span class="line">        prop<span class="token punctuation">[</span>BooleanFlags<span class="token punctuation">.</span>shouldCastTrue<span class="token punctuation">]</span> <span class="token operator">=</span></span>
<span class="line">          stringIndex <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> booleanIndex <span class="token operator">&lt;</span> stringIndex</span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>booleanIndex <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>prop<span class="token punctuation">,</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          needCastKeys<span class="token punctuation">[</span>normalizedKey<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> res<span class="token operator">:</span> NormalizedPropsOptions <span class="token operator">=</span> <span class="token punctuation">[</span>normalized<span class="token punctuation">,</span> needCastKeys<span class="token punctuation">]</span></span>
<span class="line">  cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>comp<span class="token punctuation">,</span> res<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> res</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-事件发射" tabindex="-1"><a class="header-anchor" href="#_2-事件发射"><span>2. 事件发射</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 事件发射函数</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">emit</span><span class="token punctuation">(</span></span>
<span class="line">  instance<span class="token operator">:</span> ComponentInternalInstance<span class="token punctuation">,</span></span>
<span class="line">  event<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token operator">...</span>args<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> props <span class="token operator">=</span> instance<span class="token punctuation">.</span>vnode<span class="token punctuation">.</span>props <span class="token operator">||</span> <span class="token constant">EMPTY_OBJ</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> handler <span class="token operator">=</span> props<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>handler <span class="token operator">&amp;&amp;</span> event<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">&#39;update:&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    handler <span class="token operator">=</span> props<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">callWithAsyncErrorHandling</span><span class="token punctuation">(</span></span>
<span class="line">      handler<span class="token punctuation">,</span></span>
<span class="line">      instance<span class="token punctuation">,</span></span>
<span class="line">      ErrorCodes<span class="token punctuation">.</span><span class="token constant">COMPONENT_EVENT_HANDLER</span><span class="token punctuation">,</span></span>
<span class="line">      args<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> onceHandler <span class="token operator">=</span> props<span class="token punctuation">[</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">on</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>event<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">Once</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">]</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>onceHandler<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>emitted<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      instance<span class="token punctuation">.</span>emitted <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>emitted<span class="token punctuation">[</span>event<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    instance<span class="token punctuation">.</span>emitted<span class="token punctuation">[</span>event<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token function">callWithAsyncErrorHandling</span><span class="token punctuation">(</span></span>
<span class="line">      onceHandler<span class="token punctuation">,</span></span>
<span class="line">      instance<span class="token punctuation">,</span></span>
<span class="line">      ErrorCodes<span class="token punctuation">.</span><span class="token constant">COMPONENT_EVENT_HANDLER</span><span class="token punctuation">,</span></span>
<span class="line">      args<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-依赖注入" tabindex="-1"><a class="header-anchor" href="#_3-依赖注入"><span>3. 依赖注入</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 提供依赖</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">provide</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>key<span class="token operator">:</span> InjectionKey<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">provide() can only be used inside setup().</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> provides <span class="token operator">=</span> currentInstance<span class="token punctuation">.</span>provides</span>
<span class="line">    <span class="token keyword">const</span> parentProvides <span class="token operator">=</span></span>
<span class="line">      currentInstance<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> currentInstance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>provides</span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>parentProvides <span class="token operator">===</span> provides<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      provides <span class="token operator">=</span> currentInstance<span class="token punctuation">.</span>provides <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>parentProvides<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    provides<span class="token punctuation">[</span>key <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token operator">=</span> value</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 注入依赖</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">inject</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span></span>
<span class="line">  key<span class="token operator">:</span> InjectionKey<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  defaultValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span></span>
<span class="line">  treatDefaultAsFactory <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentInstance<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">inject() can only be used inside setup().</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> provides <span class="token operator">=</span> currentInstance<span class="token punctuation">.</span>parent<span class="token operator">?.</span>provides</span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>provides <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>key <span class="token keyword">as</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">)</span> <span class="token keyword">in</span> provides<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> provides<span class="token punctuation">[</span>key <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> treatDefaultAsFactory <span class="token operator">&amp;&amp;</span> <span class="token function">isFunction</span><span class="token punctuation">(</span>defaultValue<span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">?</span> <span class="token function">defaultValue</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>currentInstance<span class="token punctuation">.</span>proxy<span class="token punctuation">)</span></span>
<span class="line">        <span class="token operator">:</span> defaultValue</span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">injection &quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">String</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot; not found.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="📊-组件优化" tabindex="-1"><a class="header-anchor" href="#📊-组件优化"><span>📊 组件优化</span></a></h2><h3 id="_1-异步组件" tabindex="-1"><a class="header-anchor" href="#_1-异步组件"><span>1. 异步组件</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 异步组件定义</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">defineAsyncComponent</span><span class="token generic class-name"><span class="token operator">&lt;</span></span>
<span class="line">  <span class="token constant">T</span> <span class="token keyword">extends</span> Component <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> ComponentPublicInstance <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>source<span class="token operator">:</span> AsyncComponentLoader<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token operator">|</span> AsyncComponentOptions<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isFunction</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    source <span class="token operator">=</span> <span class="token punctuation">{</span> loader<span class="token operator">:</span> source <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    loader<span class="token punctuation">,</span></span>
<span class="line">    loadingComponent<span class="token punctuation">,</span></span>
<span class="line">    errorComponent<span class="token punctuation">,</span></span>
<span class="line">    delay <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">,</span></span>
<span class="line">    timeout<span class="token punctuation">,</span></span>
<span class="line">    suspensible <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">    onError<span class="token operator">:</span> userOnError<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token operator">=</span> source</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> pendingRequest<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ConcreteComponent<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">  <span class="token keyword">let</span> resolvedComp<span class="token operator">:</span> ConcreteComponent <span class="token operator">|</span> <span class="token keyword">undefined</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">let</span> retries <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token function-variable function">retry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    retries<span class="token operator">++</span></span>
<span class="line">    pendingRequest <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> load <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ConcreteComponent<span class="token operator">&gt;</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">let</span> thisRequest<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ConcreteComponent<span class="token operator">&gt;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">loader</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>comp <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>thisRequest <span class="token operator">!==</span> pendingRequest <span class="token operator">&amp;&amp;</span> pendingRequest <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> thisRequest</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>comp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">            <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Async component loader resolved to undefined. If you are using retry(), make sure to return a new promise.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedComp <span class="token operator">&amp;&amp;</span> resolvedComp <span class="token operator">!==</span> comp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> resolvedComp</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        resolvedComp <span class="token operator">=</span> comp</span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>comp <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>comp <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__vccOpts<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          comp <span class="token operator">=</span> <span class="token punctuation">(</span>comp <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__vccOpts</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> comp</span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        err <span class="token operator">=</span> err <span class="token keyword">instanceof</span> <span class="token class-name">Error</span> <span class="token operator">?</span> err <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token function">String</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Async component loader failed:</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> err<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>userOnError<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token builtin">Promise</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token function-variable function">userRetry</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token function">retry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">const</span> <span class="token function-variable function">userFail</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">userOnError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> userRetry<span class="token punctuation">,</span> userFail<span class="token punctuation">,</span> retries <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">throw</span> err</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    name<span class="token operator">:</span> <span class="token string">&#39;AsyncComponentWrapper&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    __asyncLoader<span class="token operator">:</span> load<span class="token punctuation">,</span></span>
<span class="line">    <span class="token keyword">get</span> <span class="token function">__asyncResolved</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> resolvedComp</span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> instance <span class="token operator">=</span> currentInstance<span class="token operator">!</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>resolvedComp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">h</span><span class="token punctuation">(</span>resolvedComp<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">const</span> <span class="token function-variable function">onError</span> <span class="token operator">=</span> <span class="token punctuation">(</span>err<span class="token operator">:</span> Error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        pendingRequest <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token function">handleError</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">ASYNC_COMPONENT_LOADER</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">let</span> loaded <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">      <span class="token keyword">let</span> error <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">let</span> delayed <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token operator">!</span>delay<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>delay<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          delayed<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>timeout <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>loaded<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>error<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">const</span> err <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span></span>
<span class="line">              <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Async component timed out after </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>timeout<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">ms.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">            <span class="token punctuation">)</span></span>
<span class="line">            <span class="token function">onError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">            error<span class="token punctuation">.</span>value <span class="token operator">=</span> err</span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">,</span> timeout<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>comp <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          loaded<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">          resolvedComp <span class="token operator">=</span> comp</span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>parent <span class="token operator">&amp;&amp;</span> <span class="token function">isKeepAlive</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>vnode<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token punctuation">;</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>ctx <span class="token keyword">as</span> KeepAliveContext<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deactivate</span><span class="token punctuation">(</span>instance<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>err <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">onError</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">          error<span class="token punctuation">.</span>value <span class="token operator">=</span> err</span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>loaded<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> resolvedComp<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>resolvedComp<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> errorComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>errorComponent<span class="token punctuation">,</span> <span class="token punctuation">{</span> error<span class="token operator">:</span> error<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>loadingComponent <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>delayed<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token function">h</span><span class="token punctuation">(</span>loadingComponent<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token constant">T</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-组件缓存" tabindex="-1"><a class="header-anchor" href="#_2-组件缓存"><span>2. 组件缓存</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// KeepAlive组件</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> KeepAliveImpl <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  name<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">KeepAlive</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">  __isKeepAlive<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  inheritRef<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">  props<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">    include<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> RegExp<span class="token punctuation">,</span> <span class="token builtin">Array</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    exclude<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> RegExp<span class="token punctuation">,</span> <span class="token builtin">Array</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    max<span class="token operator">:</span> <span class="token punctuation">[</span>String<span class="token punctuation">,</span> Number<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">setup</span><span class="token punctuation">(</span>props<span class="token operator">:</span> KeepAliveProps<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots <span class="token punctuation">}</span><span class="token operator">:</span> SetupContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token function">getCurrentInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!</span></span>
<span class="line">    <span class="token keyword">const</span> sharedContext <span class="token operator">=</span> instance<span class="token punctuation">.</span>ctx <span class="token keyword">as</span> KeepAliveContext</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sharedContext<span class="token punctuation">.</span>renderer<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> children <span class="token operator">=</span> slots<span class="token punctuation">.</span>default <span class="token operator">&amp;&amp;</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">const</span> child <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">KeepAlive should contain exactly one component child.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">          <span class="token keyword">return</span> children</span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">          <span class="token operator">!</span><span class="token function">isVNode</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">          <span class="token operator">!</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token keyword">return</span> child</span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">return</span> child</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map<span class="token operator">&lt;</span>Component<span class="token punctuation">,</span> VNode<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">const</span> keys <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">let</span> current<span class="token operator">:</span> VNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">      renderer<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">        p<span class="token operator">:</span> patch<span class="token punctuation">,</span></span>
<span class="line">        m<span class="token operator">:</span> move<span class="token punctuation">,</span></span>
<span class="line">        um<span class="token operator">:</span> unmount<span class="token punctuation">,</span></span>
<span class="line">        o<span class="token operator">:</span> <span class="token punctuation">{</span> createElement <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token operator">=</span> sharedContext</span>
<span class="line"></span>
<span class="line">    <span class="token keyword">const</span> storageContainer <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    sharedContext<span class="token punctuation">.</span><span class="token function-variable function">activate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> isSVG<span class="token punctuation">,</span> optimized<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> instance <span class="token operator">=</span> vnode<span class="token punctuation">.</span>component<span class="token operator">!</span></span>
<span class="line">      <span class="token function">move</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">,</span> MoveType<span class="token punctuation">.</span><span class="token constant">ENTER</span><span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">patch</span><span class="token punctuation">(</span></span>
<span class="line">        instance<span class="token punctuation">.</span>vnode<span class="token punctuation">,</span></span>
<span class="line">        vnode<span class="token punctuation">,</span></span>
<span class="line">        container<span class="token punctuation">,</span></span>
<span class="line">        anchor<span class="token punctuation">,</span></span>
<span class="line">        instance<span class="token punctuation">,</span></span>
<span class="line">        parentSuspense<span class="token punctuation">,</span></span>
<span class="line">        isSVG<span class="token punctuation">,</span></span>
<span class="line">        vnode<span class="token punctuation">.</span>slotScopeIds<span class="token punctuation">,</span></span>
<span class="line">        optimized<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        instance<span class="token punctuation">.</span>isDeactivated <span class="token operator">=</span> <span class="token boolean">false</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">invokeArrayFns</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>a<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">const</span> vnodeHook <span class="token operator">=</span> vnode<span class="token punctuation">.</span>props <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>onVnodeMounted</span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>vnodeHook<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">invokeVNodeHook</span><span class="token punctuation">(</span>vnodeHook<span class="token punctuation">,</span> instance<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    sharedContext<span class="token punctuation">.</span><span class="token function-variable function">deactivate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>vnode<span class="token operator">:</span> VNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> instance <span class="token operator">=</span> vnode<span class="token punctuation">.</span>component<span class="token operator">!</span></span>
<span class="line">      <span class="token function">move</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> storageContainer<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> MoveType<span class="token punctuation">.</span><span class="token constant">LEAVE</span><span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">queuePostRenderEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance<span class="token punctuation">.</span>da<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">invokeArrayFns</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>da<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token keyword">const</span> vnodeHook <span class="token operator">=</span> vnode<span class="token punctuation">.</span>props <span class="token operator">&amp;&amp;</span> vnode<span class="token punctuation">.</span>props<span class="token punctuation">.</span>onVnodeUnmounted</span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>vnodeHook<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">invokeVNodeHook</span><span class="token punctuation">(</span>vnodeHook<span class="token punctuation">,</span> instance<span class="token punctuation">.</span>parent<span class="token punctuation">,</span> vnode<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        instance<span class="token punctuation">.</span>isDeactivated <span class="token operator">=</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span> parentSuspense<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">unmount</span><span class="token punctuation">(</span>vnode<span class="token operator">:</span> VNode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">resetShapeFlag</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">unmount</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> instance<span class="token punctuation">,</span> parentSuspense<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">pruneCache</span><span class="token punctuation">(</span>filter<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      cache<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getComponentName</span><span class="token punctuation">(</span>vnode<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">as</span></span> ConcreteComponent<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>filter <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">filter</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">pruneCacheEntry</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">function</span> <span class="token function">pruneCacheEntry</span><span class="token punctuation">(</span>key<span class="token operator">:</span> CacheKey<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> cached <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">as</span> VNode</span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>current <span class="token operator">||</span> cached<span class="token punctuation">.</span>type <span class="token operator">!==</span> current<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">unmount</span><span class="token punctuation">(</span>cached<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>current<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">resetShapeFlag</span><span class="token punctuation">(</span>current<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      cache<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">      keys<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token function">watch</span><span class="token punctuation">(</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">[</span>props<span class="token punctuation">.</span>include<span class="token punctuation">,</span> props<span class="token punctuation">.</span>exclude<span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">(</span><span class="token punctuation">[</span>include<span class="token punctuation">,</span> exclude<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        include <span class="token operator">&amp;&amp;</span> <span class="token function">pruneCache</span><span class="token punctuation">(</span>name <span class="token operator">=&gt;</span> <span class="token function">matches</span><span class="token punctuation">(</span>include<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">        exclude <span class="token operator">&amp;&amp;</span> <span class="token function">pruneCache</span><span class="token punctuation">(</span>name <span class="token operator">=&gt;</span> <span class="token operator">!</span><span class="token function">matches</span><span class="token punctuation">(</span>exclude<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">{</span> flush<span class="token operator">:</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> deep<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">let</span> pendingCacheKey<span class="token operator">:</span> CacheKey <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token function-variable function">cacheSubtree</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>pendingCacheKey <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>pendingCacheKey<span class="token punctuation">,</span> <span class="token function">getInnerChild</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token function">onMounted</span><span class="token punctuation">(</span>cacheSubtree<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">onUpdated</span><span class="token punctuation">(</span>cacheSubtree<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">onBeforeUnmount</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      cache<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>cached <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">const</span> <span class="token punctuation">{</span> subTree<span class="token punctuation">,</span> suspense <span class="token punctuation">}</span> <span class="token operator">=</span> instance</span>
<span class="line">        <span class="token keyword">const</span> currentSubTree <span class="token operator">=</span> <span class="token function">getInnerChild</span><span class="token punctuation">(</span>subTree<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>cached<span class="token punctuation">.</span>type <span class="token operator">===</span> currentSubTree<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">resetShapeFlag</span><span class="token punctuation">(</span>currentSubTree<span class="token punctuation">)</span></span>
<span class="line">          <span class="token keyword">const</span> da <span class="token operator">=</span> currentSubTree<span class="token punctuation">.</span>component<span class="token operator">!</span><span class="token punctuation">.</span>da</span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span>da<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">invokeArrayFns</span><span class="token punctuation">(</span>da<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">unmount</span><span class="token punctuation">(</span>cached<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      pendingCacheKey <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>slots<span class="token punctuation">.</span>default<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">const</span> children <span class="token operator">=</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">const</span> rawVNode <span class="token operator">=</span> children<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">warn</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">KeepAlive should contain exactly one component child.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        current <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token keyword">return</span> children</span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token operator">!</span><span class="token function">isVNode</span><span class="token punctuation">(</span>rawVNode<span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">        <span class="token operator">!</span><span class="token punctuation">(</span>rawVNode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">STATEFUL_COMPONENT</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        current <span class="token operator">=</span> <span class="token keyword">null</span></span>
<span class="line">        <span class="token keyword">return</span> rawVNode</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">let</span> vnode <span class="token operator">=</span> <span class="token function">getInnerChild</span><span class="token punctuation">(</span>rawVNode<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">const</span> comp <span class="token operator">=</span> vnode<span class="token punctuation">.</span><span class="token keyword">type</span> <span class="token class-name"><span class="token keyword">as</span></span> ConcreteComponent</span>
<span class="line">      <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getComponentName</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token function">isAsyncWrapper</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span> <span class="token operator">?</span> vnode<span class="token punctuation">.</span>type<span class="token punctuation">.</span>__asyncResolved <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">:</span> comp<span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">const</span> <span class="token punctuation">{</span> include<span class="token punctuation">,</span> exclude<span class="token punctuation">,</span> max <span class="token punctuation">}</span> <span class="token operator">=</span> props</span>
<span class="line"></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">        <span class="token punctuation">(</span>include <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token operator">!</span>name <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">matches</span><span class="token punctuation">(</span>include<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span></span>
<span class="line">        <span class="token punctuation">(</span>exclude <span class="token operator">&amp;&amp;</span> name <span class="token operator">&amp;&amp;</span> <span class="token function">matches</span><span class="token punctuation">(</span>exclude<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        current <span class="token operator">=</span> vnode</span>
<span class="line">        <span class="token keyword">return</span> rawVNode</span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">const</span> key <span class="token operator">=</span> vnode<span class="token punctuation">.</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> comp <span class="token operator">:</span> vnode<span class="token punctuation">.</span>key</span>
<span class="line">      <span class="token keyword">const</span> cachedVNode <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>el<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        vnode <span class="token operator">=</span> <span class="token function">cloneVNode</span><span class="token punctuation">(</span>vnode<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>rawVNode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT_STYLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          rawVNode<span class="token punctuation">.</span>shapeFlag <span class="token operator">&amp;=</span> <span class="token operator">~</span>ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT_STYLED</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      pendingCacheKey <span class="token operator">=</span> key</span>
<span class="line"></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        vnode<span class="token punctuation">.</span>el <span class="token operator">=</span> cachedVNode<span class="token punctuation">.</span>el</span>
<span class="line">        vnode<span class="token punctuation">.</span>component <span class="token operator">=</span> cachedVNode<span class="token punctuation">.</span>component</span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>vnode<span class="token punctuation">.</span>transition<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">setTransitionHooks</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> vnode<span class="token punctuation">.</span>transition<span class="token operator">!</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT_KEPT_ALIVE</span></span>
<span class="line">        keys<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">        keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">        keys<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">.</span>size <span class="token operator">&gt;</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>max <span class="token keyword">as</span> <span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">pruneCacheEntry</span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      vnode<span class="token punctuation">.</span>shapeFlag <span class="token operator">|=</span> ShapeFlags<span class="token punctuation">.</span><span class="token constant">COMPONENT_SHOULD_KEEP_ALIVE</span></span>
<span class="line"></span>
<span class="line">      current <span class="token operator">=</span> vnode</span>
<span class="line">      <span class="token keyword">return</span> <span class="token function">isSuspense</span><span class="token punctuation">(</span>rawVNode<span class="token punctuation">)</span> <span class="token operator">?</span> rawVNode <span class="token operator">:</span> vnode</span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🎯-总结" tabindex="-1"><a class="header-anchor" href="#🎯-总结"><span>🎯 总结</span></a></h2><p>Vue3的组件系统展现了现代前端框架的设计精髓：</p><ol><li><strong>灵活定义</strong> - 多种组件定义方式</li><li><strong>完整生命周期</strong> - 丰富的生命周期钩子</li><li><strong>高效渲染</strong> - 智能的组件渲染机制</li><li><strong>组件通信</strong> - Props、Events、Inject/Provide</li><li><strong>性能优化</strong> - 异步组件、组件缓存</li><li><strong>类型安全</strong> - 完整的TypeScript支持</li></ol><p>这套组件系统不仅为Vue3提供了强大的组件能力，也为其他前端项目提供了优秀的设计参考。</p>`,41)]))}const i=s(t,[["render",o]]),u=JSON.parse('{"path":"/05-component-system.html","title":"Vue3组件系统详解","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"🎯 组件系统概述","slug":"🎯-组件系统概述","link":"#🎯-组件系统概述","children":[{"level":3,"title":"组件系统架构图","slug":"组件系统架构图","link":"#组件系统架构图","children":[]}]},{"level":2,"title":"🏗️ 组件定义","slug":"🏗️-组件定义","link":"#🏗️-组件定义","children":[{"level":3,"title":"1. 组件类型","slug":"_1-组件类型","link":"#_1-组件类型","children":[]},{"level":3,"title":"2. defineComponent","slug":"_2-definecomponent","link":"#_2-definecomponent","children":[]}]},{"level":2,"title":"🔧 组件实例","slug":"🔧-组件实例","link":"#🔧-组件实例","children":[{"level":3,"title":"1. 组件内部实例","slug":"_1-组件内部实例","link":"#_1-组件内部实例","children":[]},{"level":3,"title":"2. 组件公共实例","slug":"_2-组件公共实例","link":"#_2-组件公共实例","children":[]}]},{"level":2,"title":"🎛️ 组件渲染","slug":"🎛️-组件渲染","link":"#🎛️-组件渲染","children":[{"level":3,"title":"1. 组件渲染流程","slug":"_1-组件渲染流程","link":"#_1-组件渲染流程","children":[]},{"level":3,"title":"2. 组件挂载","slug":"_2-组件挂载","link":"#_2-组件挂载","children":[]}]},{"level":2,"title":"🔄 生命周期","slug":"🔄-生命周期","link":"#🔄-生命周期","children":[{"level":3,"title":"1. 生命周期钩子","slug":"_1-生命周期钩子","link":"#_1-生命周期钩子","children":[]},{"level":3,"title":"2. 生命周期执行","slug":"_2-生命周期执行","link":"#_2-生命周期执行","children":[]}]},{"level":2,"title":"🎯 组件通信","slug":"🎯-组件通信","link":"#🎯-组件通信","children":[{"level":3,"title":"1. Props传递","slug":"_1-props传递","link":"#_1-props传递","children":[]},{"level":3,"title":"2. 事件发射","slug":"_2-事件发射","link":"#_2-事件发射","children":[]},{"level":3,"title":"3. 依赖注入","slug":"_3-依赖注入","link":"#_3-依赖注入","children":[]}]},{"level":2,"title":"📊 组件优化","slug":"📊-组件优化","link":"#📊-组件优化","children":[{"level":3,"title":"1. 异步组件","slug":"_1-异步组件","link":"#_1-异步组件","children":[]},{"level":3,"title":"2. 组件缓存","slug":"_2-组件缓存","link":"#_2-组件缓存","children":[]}]},{"level":2,"title":"🎯 总结","slug":"🎯-总结","link":"#🎯-总结","children":[]}],"git":{"updatedTime":1754567332000,"contributors":[{"name":"atian","username":"atian","email":"atian@micous.com","commits":1,"url":"https://github.com/atian"}],"changelog":[{"hash":"fc80bf956ce2f65021db3835863d30f81c328ee4","time":1754567332000,"email":"atian@micous.com","author":"atian","message":"更新GitHub Actions文档，添加代码块格式化，补充相关链接，并在VuePress配置中新增Vue3核心知识的导航和侧边栏，优化页面路由设置。"}]},"filePathRelative":"05-component-system.md"}');export{i as comp,u as data};
