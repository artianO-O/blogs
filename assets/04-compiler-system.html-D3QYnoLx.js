import{_ as s,c as a,a as p,o as t}from"./app-BYt8acor.js";const e={};function o(c,n){return t(),a("div",null,n[0]||(n[0]=[p(`<h1 id="vue3编译器系统详解" tabindex="-1"><a class="header-anchor" href="#vue3编译器系统详解"><span>Vue3编译器系统详解</span></a></h1><h2 id="🎯-编译器概述" tabindex="-1"><a class="header-anchor" href="#🎯-编译器概述"><span>🎯 编译器概述</span></a></h2><p>Vue3的编译器系统是框架的核心优化引擎，它将模板编译成高效的渲染函数，实现了编译时优化和运行时性能提升。</p><h3 id="编译器架构图" tabindex="-1"><a class="header-anchor" href="#编译器架构图"><span>编译器架构图</span></a></h3><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code><span class="line">┌─────────────────────────────────────┐</span>
<span class="line">│        模板层 (Template Layer)      │</span>
<span class="line">│  &lt;template&gt; | 字符串模板 | JSX      │</span>
<span class="line">├─────────────────────────────────────┤</span>
<span class="line">│        解析层 (Parse Layer)         │</span>
<span class="line">│  词法分析 | 语法分析 | AST生成      │</span>
<span class="line">├─────────────────────────────────────┤</span>
<span class="line">│        转换层 (Transform Layer)     │</span>
<span class="line">│  静态提升 | 补丁标志 | 块级优化     │</span>
<span class="line">├─────────────────────────────────────┤</span>
<span class="line">│        生成层 (Codegen Layer)       │</span>
<span class="line">│  渲染函数 | 优化代码 | 源码映射     │</span>
<span class="line">└─────────────────────────────────────┘</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🔍-解析阶段-parse" tabindex="-1"><a class="header-anchor" href="#🔍-解析阶段-parse"><span>🔍 解析阶段 (Parse)</span></a></h2><h3 id="_1-词法分析-lexical-analysis" tabindex="-1"><a class="header-anchor" href="#_1-词法分析-lexical-analysis"><span>1. 词法分析 (Lexical Analysis)</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 词法分析器状态</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">enum</span> State <span class="token punctuation">{</span></span>
<span class="line">  Text <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">// 文本状态</span></span>
<span class="line">  InterpolationOpen<span class="token punctuation">,</span> <span class="token comment">// 插值开始</span></span>
<span class="line">  Interpolation<span class="token punctuation">,</span> <span class="token comment">// 插值内容</span></span>
<span class="line">  InterpolationClose<span class="token punctuation">,</span> <span class="token comment">// 插值结束</span></span>
<span class="line">  BeforeTagName<span class="token punctuation">,</span> <span class="token comment">// 标签名前</span></span>
<span class="line">  InTagName<span class="token punctuation">,</span> <span class="token comment">// 标签名中</span></span>
<span class="line">  InSelfClosingTag<span class="token punctuation">,</span> <span class="token comment">// 自闭合标签</span></span>
<span class="line">  BeforeClosingTagName<span class="token punctuation">,</span> <span class="token comment">// 结束标签名前</span></span>
<span class="line">  InClosingTagName<span class="token punctuation">,</span> <span class="token comment">// 结束标签名中</span></span>
<span class="line">  AfterClosingTagName<span class="token punctuation">,</span> <span class="token comment">// 结束标签名后</span></span>
<span class="line">  BeforeAttrName<span class="token punctuation">,</span> <span class="token comment">// 属性名前</span></span>
<span class="line">  InAttrName<span class="token punctuation">,</span> <span class="token comment">// 属性名中</span></span>
<span class="line">  InDirName<span class="token punctuation">,</span> <span class="token comment">// 指令名中</span></span>
<span class="line">  InDirArg<span class="token punctuation">,</span> <span class="token comment">// 指令参数中</span></span>
<span class="line">  InDirDynamicArg<span class="token punctuation">,</span> <span class="token comment">// 动态指令参数中</span></span>
<span class="line">  InDirModifier<span class="token punctuation">,</span> <span class="token comment">// 指令修饰符中</span></span>
<span class="line">  AfterAttrName<span class="token punctuation">,</span> <span class="token comment">// 属性名后</span></span>
<span class="line">  BeforeAttrValue<span class="token punctuation">,</span> <span class="token comment">// 属性值前</span></span>
<span class="line">  InAttrValueDq<span class="token punctuation">,</span> <span class="token comment">// 双引号属性值</span></span>
<span class="line">  InAttrValueSq<span class="token punctuation">,</span> <span class="token comment">// 单引号属性值</span></span>
<span class="line">  InAttrValueNq<span class="token punctuation">,</span> <span class="token comment">// 无引号属性值</span></span>
<span class="line">  BeforeDeclaration<span class="token punctuation">,</span> <span class="token comment">// 声明前</span></span>
<span class="line">  InDeclaration<span class="token punctuation">,</span> <span class="token comment">// 声明中</span></span>
<span class="line">  BeforeComment<span class="token punctuation">,</span> <span class="token comment">// 注释前</span></span>
<span class="line">  InComment<span class="token punctuation">,</span> <span class="token comment">// 注释中</span></span>
<span class="line">  BeforeSpecialS<span class="token punctuation">,</span> <span class="token comment">// 特殊标签前</span></span>
<span class="line">  BeforeSpecialT<span class="token punctuation">,</span> <span class="token comment">// 特殊标签前</span></span>
<span class="line">  InRCDATA<span class="token punctuation">,</span> <span class="token comment">// RCDATA中</span></span>
<span class="line">  InEntity<span class="token punctuation">,</span> <span class="token comment">// 实体中</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 词法分析器</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">baseParse</span><span class="token punctuation">(</span></span>
<span class="line">  content<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span></span>
<span class="line">  options<span class="token operator">:</span> ParserOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> RootNode <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createParserContext</span><span class="token punctuation">(</span>content<span class="token punctuation">,</span> options<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token function">getCursor</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">createRoot</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token function">parseChildren</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">getSelection</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-语法分析-syntax-analysis" tabindex="-1"><a class="header-anchor" href="#_2-语法分析-syntax-analysis"><span>2. 语法分析 (Syntax Analysis)</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 解析子节点</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">parseChildren</span><span class="token punctuation">(</span></span>
<span class="line">  context<span class="token operator">:</span> ParserContext<span class="token punctuation">,</span></span>
<span class="line">  mode<span class="token operator">:</span> TextModes<span class="token punctuation">,</span></span>
<span class="line">  ancestors<span class="token operator">:</span> ElementNode<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> parent <span class="token operator">=</span> <span class="token function">last</span><span class="token punctuation">(</span>ancestors<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> ns <span class="token operator">=</span> parent <span class="token operator">?</span> parent<span class="token punctuation">.</span>ns <span class="token operator">:</span> Namespaces<span class="token punctuation">.</span><span class="token constant">HTML</span></span>
<span class="line">  <span class="token keyword">const</span> nodes<span class="token operator">:</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnd</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> s <span class="token operator">=</span> context<span class="token punctuation">.</span>source</span>
<span class="line">    <span class="token keyword">let</span> node<span class="token operator">:</span> TemplateChildNode <span class="token operator">|</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token operator">=</span> <span class="token keyword">undefined</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span> <span class="token operator">||</span> mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">RCDATA</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>context<span class="token punctuation">.</span>inVPre <span class="token operator">&amp;&amp;</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> context<span class="token punctuation">.</span>options<span class="token punctuation">.</span>delimiters<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 解析插值</span></span>
<span class="line">        node <span class="token operator">=</span> <span class="token function">parseInterpolation</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> TextModes<span class="token punctuation">.</span><span class="token constant">DATA</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 解析标签</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">EOF_IN_TAG</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 解析注释或DOCTYPE</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;!--&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            node <span class="token operator">=</span> <span class="token function">parseComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;!DOCTYPE&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">startsWith</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">&#39;&lt;![CDATA[&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">if</span> <span class="token punctuation">(</span>ns <span class="token operator">!==</span> Namespaces<span class="token punctuation">.</span><span class="token constant">HTML</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">              node <span class="token operator">=</span> <span class="token function">parseCDATA</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">              <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">CDATA_IN_HTML_CONTENT</span><span class="token punctuation">)</span></span>
<span class="line">              node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">INCORRECTLY_OPENED_COMMENT</span><span class="token punctuation">)</span></span>
<span class="line">            node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 解析结束标签</span></span>
<span class="line">          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">parseTag</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> TagType<span class="token punctuation">.</span>End<span class="token punctuation">,</span> parent<span class="token punctuation">)</span></span>
<span class="line">            <span class="token keyword">continue</span></span>
<span class="line">          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">INVALID_FIRST_CHARACTER_OF_TAG_NAME</span><span class="token punctuation">)</span></span>
<span class="line">            node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line">          <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[a-z]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">i</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token comment">// 解析开始标签</span></span>
<span class="line">          node <span class="token operator">=</span> <span class="token function">parseElement</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ancestors<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">emitError</span><span class="token punctuation">(</span></span>
<span class="line">            context<span class="token punctuation">,</span></span>
<span class="line">            ErrorCodes<span class="token punctuation">.</span><span class="token constant">UNEXPECTED_QUESTION_MARK_INSTEAD_OF_TAG_NAME</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token punctuation">)</span></span>
<span class="line">          node <span class="token operator">=</span> <span class="token function">parseBogusComment</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">          <span class="token function">emitError</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ErrorCodes<span class="token punctuation">.</span><span class="token constant">INVALID_FIRST_CHARACTER_OF_TAG_NAME</span><span class="token punctuation">)</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 解析文本</span></span>
<span class="line">      node <span class="token operator">=</span> <span class="token function">parseText</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> mode<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> node<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token function">pushNode</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> node<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">pushNode</span><span class="token punctuation">(</span>nodes<span class="token punctuation">,</span> node<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> nodes</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-ast节点类型" tabindex="-1"><a class="header-anchor" href="#_3-ast节点类型"><span>3. AST节点类型</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token keyword">export</span> <span class="token keyword">enum</span> NodeTypes <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">ROOT</span><span class="token punctuation">,</span> <span class="token comment">// 根节点</span></span>
<span class="line">  <span class="token constant">ELEMENT</span><span class="token punctuation">,</span> <span class="token comment">// 元素节点</span></span>
<span class="line">  <span class="token constant">TEXT</span><span class="token punctuation">,</span> <span class="token comment">// 文本节点</span></span>
<span class="line">  <span class="token constant">COMMENT</span><span class="token punctuation">,</span> <span class="token comment">// 注释节点</span></span>
<span class="line">  <span class="token constant">SIMPLE_EXPRESSION</span><span class="token punctuation">,</span> <span class="token comment">// 简单表达式</span></span>
<span class="line">  <span class="token constant">INTERPOLATION</span><span class="token punctuation">,</span> <span class="token comment">// 插值表达式</span></span>
<span class="line">  <span class="token constant">ATTRIBUTE</span><span class="token punctuation">,</span> <span class="token comment">// 属性节点</span></span>
<span class="line">  <span class="token constant">DIRECTIVE</span><span class="token punctuation">,</span> <span class="token comment">// 指令节点</span></span>
<span class="line">  <span class="token constant">COMPOUND_EXPRESSION</span><span class="token punctuation">,</span> <span class="token comment">// 复合表达式</span></span>
<span class="line">  <span class="token constant">IF</span><span class="token punctuation">,</span> <span class="token comment">// 条件节点</span></span>
<span class="line">  <span class="token constant">IF_BRANCH</span><span class="token punctuation">,</span> <span class="token comment">// 条件分支</span></span>
<span class="line">  <span class="token constant">FOR</span><span class="token punctuation">,</span> <span class="token comment">// 循环节点</span></span>
<span class="line">  <span class="token constant">TEXT_CALL</span><span class="token punctuation">,</span> <span class="token comment">// 文本调用</span></span>
<span class="line">  <span class="token constant">VNODE_CALL</span><span class="token punctuation">,</span> <span class="token comment">// VNode调用</span></span>
<span class="line">  <span class="token constant">JS_CALL_EXPRESSION</span><span class="token punctuation">,</span> <span class="token comment">// JS调用表达式</span></span>
<span class="line">  <span class="token constant">JS_OBJECT_EXPRESSION</span><span class="token punctuation">,</span> <span class="token comment">// JS对象表达式</span></span>
<span class="line">  <span class="token constant">JS_PROPERTY</span><span class="token punctuation">,</span> <span class="token comment">// JS属性</span></span>
<span class="line">  <span class="token constant">JS_ARRAY_EXPRESSION</span><span class="token punctuation">,</span> <span class="token comment">// JS数组表达式</span></span>
<span class="line">  <span class="token constant">JS_FUNCTION_EXPRESSION</span><span class="token punctuation">,</span> <span class="token comment">// JS函数表达式</span></span>
<span class="line">  <span class="token constant">JS_CONDITIONAL_EXPRESSION</span><span class="token punctuation">,</span> <span class="token comment">// JS条件表达式</span></span>
<span class="line">  <span class="token constant">JS_CACHE_EXPRESSION</span><span class="token punctuation">,</span> <span class="token comment">// JS缓存表达式</span></span>
<span class="line">  <span class="token constant">JS_BLOCK_STATEMENT</span><span class="token punctuation">,</span> <span class="token comment">// JS块语句</span></span>
<span class="line">  <span class="token constant">JS_TEMPLATE_LITERAL</span><span class="token punctuation">,</span> <span class="token comment">// JS模板字面量</span></span>
<span class="line">  <span class="token constant">JS_IF_STATEMENT</span><span class="token punctuation">,</span> <span class="token comment">// JS if语句</span></span>
<span class="line">  <span class="token constant">JS_ASSIGNMENT_EXPRESSION</span><span class="token punctuation">,</span> <span class="token comment">// JS赋值表达式</span></span>
<span class="line">  <span class="token constant">JS_SEQUENCE_EXPRESSION</span><span class="token punctuation">,</span> <span class="token comment">// JS序列表达式</span></span>
<span class="line">  <span class="token constant">JS_RETURN_STATEMENT</span><span class="token punctuation">,</span> <span class="token comment">// JS返回语句</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// AST节点接口</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> NodeTypes</span>
<span class="line">  loc<span class="token operator">:</span> SourceLocation</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">ElementNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span></span>
<span class="line">  ns<span class="token operator">:</span> Namespaces</span>
<span class="line">  tag<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  tagType<span class="token operator">:</span> ElementTypes</span>
<span class="line">  isSelfClosing<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  props<span class="token operator">:</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>AttributeNode <span class="token operator">|</span> DirectiveNode<span class="token operator">&gt;</span></span>
<span class="line">  children<span class="token operator">:</span> TemplateChildNode<span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">InterpolationNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span></span>
<span class="line">  content<span class="token operator">:</span> ExpressionNode</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">SimpleExpressionNode</span> <span class="token keyword">extends</span> <span class="token class-name">Node</span> <span class="token punctuation">{</span></span>
<span class="line">  type<span class="token operator">:</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span></span>
<span class="line">  content<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  isStatic<span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  constType<span class="token operator">:</span> ConstantTypes</span>
<span class="line">  hoisted<span class="token operator">?</span><span class="token operator">:</span> JSChildNode</span>
<span class="line">  isIdentifier<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🔄-转换阶段-transform" tabindex="-1"><a class="header-anchor" href="#🔄-转换阶段-transform"><span>🔄 转换阶段 (Transform)</span></a></h2><h3 id="_1-转换器架构" tabindex="-1"><a class="header-anchor" href="#_1-转换器架构"><span>1. 转换器架构</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 转换上下文</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">TransformContext</span> <span class="token punctuation">{</span></span>
<span class="line">  root<span class="token operator">:</span> RootNode</span>
<span class="line">  helpers<span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">symbol</span><span class="token punctuation">,</span> <span class="token builtin">number</span><span class="token operator">&gt;</span></span>
<span class="line">  <span class="token generic-function"><span class="token function">helper</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> <span class="token keyword">keyof</span> <span class="token keyword">typeof</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&#39;./runtimeHelpers&#39;</span><span class="token punctuation">)</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token function">helperString</span><span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token function">replaceNode</span><span class="token punctuation">(</span>node<span class="token operator">:</span> TemplateChildNode<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token function">removeNode</span><span class="token punctuation">(</span>node<span class="token operator">?</span><span class="token operator">:</span> TemplateChildNode<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token function">onNodeRemoved</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token function">addIdentifiers</span><span class="token punctuation">(</span>exp<span class="token operator">:</span> ExpressionNode <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token function">removeIdentifiers</span><span class="token punctuation">(</span>exp<span class="token operator">:</span> ExpressionNode <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token function">hoist</span><span class="token punctuation">(</span>exp<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> JSChildNode <span class="token operator">|</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span><span class="token builtin">string</span> <span class="token operator">|</span> JSChildNode<span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  <span class="token generic-function"><span class="token function">cache</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token keyword">extends</span> Node<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>exp<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> isVNode<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token constant">T</span></span>
<span class="line">  constantCache<span class="token operator">:</span> Map<span class="token operator">&lt;</span>TemplateChildNode<span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span></span>
<span class="line">  filters<span class="token operator">?</span><span class="token operator">:</span> Set<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span>
<span class="line">  prefixIdentifiers<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span></span>
<span class="line">  <span class="token function">preTransformNode</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ElementNode<span class="token punctuation">)</span><span class="token operator">:</span> ElementNode <span class="token operator">|</span> <span class="token keyword">void</span></span>
<span class="line">  postTransformNode<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>node<span class="token operator">:</span> ElementNode<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> CompilerError<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 节点转换器</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">NodeTransform</span> <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">  node<span class="token operator">:</span> RootNode <span class="token operator">|</span> TemplateChildNode<span class="token punctuation">,</span></span>
<span class="line">  context<span class="token operator">:</span> TransformContext<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 指令转换器</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">DirectiveTransform</span> <span class="token operator">=</span> <span class="token punctuation">(</span></span>
<span class="line">  dir<span class="token operator">:</span> DirectiveNode<span class="token punctuation">,</span></span>
<span class="line">  node<span class="token operator">:</span> ElementNode<span class="token punctuation">,</span></span>
<span class="line">  context<span class="token operator">:</span> TransformContext<span class="token punctuation">,</span></span>
<span class="line">  augmentor<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>ret<span class="token operator">:</span> DirectiveTransformResult<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> DirectiveTransformResult<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> DirectiveTransformResult</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-静态提升-static-hoisting" tabindex="-1"><a class="header-anchor" href="#_2-静态提升-static-hoisting"><span>2. 静态提升 (Static Hoisting)</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 静态提升转换器</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> transformHoist<span class="token operator">:</span> <span class="token function-variable function">NodeTransform</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span></span>
<span class="line">    node<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span> <span class="token operator">&amp;&amp;</span></span>
<span class="line">    node<span class="token punctuation">.</span>tagType <span class="token operator">===</span> ElementTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span></span>
<span class="line">  <span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> <span class="token punctuation">{</span> constantCache <span class="token punctuation">}</span> <span class="token operator">=</span> context</span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 检查是否为静态节点</span></span>
<span class="line">    <span class="token keyword">const</span> hoisted <span class="token operator">=</span> <span class="token function">getHoistedNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>hoisted<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 提升静态节点</span></span>
<span class="line">      context<span class="token punctuation">.</span><span class="token function">hoist</span><span class="token punctuation">(</span>hoisted<span class="token punctuation">)</span></span>
<span class="line">      <span class="token comment">// 替换为静态引用</span></span>
<span class="line">      context<span class="token punctuation">.</span><span class="token function">replaceNode</span><span class="token punctuation">(</span></span>
<span class="line">        <span class="token function">createSimpleExpression</span><span class="token punctuation">(</span></span>
<span class="line">          context<span class="token punctuation">.</span><span class="token function">helperString</span><span class="token punctuation">(</span>HoistType<span class="token punctuation">.</span><span class="token constant">HOISTED</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">          <span class="token boolean">false</span><span class="token punctuation">,</span></span>
<span class="line">          node<span class="token punctuation">.</span>loc<span class="token punctuation">,</span></span>
<span class="line">        <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">      <span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取可提升的节点</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getHoistedNode</span><span class="token punctuation">(</span></span>
<span class="line">  node<span class="token operator">:</span> ElementNode<span class="token punctuation">,</span></span>
<span class="line">  context<span class="token operator">:</span> TransformContext<span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token keyword">undefined</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> constantCache <span class="token punctuation">}</span> <span class="token operator">=</span> context</span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 检查是否已经缓存</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>constantCache<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> constantCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 检查是否为静态节点</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isStaticNode</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> hoisted <span class="token operator">=</span> <span class="token function">generateStaticNode</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">    constantCache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> hoisted<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span> hoisted</span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token keyword">undefined</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 检查静态节点</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">isStaticNode</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ElementNode<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 检查属性是否静态</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">of</span> node<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">DIRECTIVE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ATTRIBUTE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>value <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isStaticExp</span><span class="token punctuation">(</span>prop<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 检查子节点是否静态</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isStaticChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-补丁标志-patch-flags" tabindex="-1"><a class="header-anchor" href="#_3-补丁标志-patch-flags"><span>3. 补丁标志 (Patch Flags)</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 补丁标志转换器</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> transformElement<span class="token operator">:</span> <span class="token function-variable function">NodeTransform</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">!==</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> tag<span class="token punctuation">,</span> props <span class="token punctuation">}</span> <span class="token operator">=</span> node</span>
<span class="line">  <span class="token keyword">const</span> isComponent <span class="token operator">=</span> <span class="token function">isComponentTag</span><span class="token punctuation">(</span>tag<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 处理组件</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>isComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">transformComponent</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 处理元素</span></span>
<span class="line">  <span class="token keyword">const</span> vnodeTag <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line">  <span class="token keyword">const</span> vnodeProps <span class="token operator">=</span> <span class="token function">buildProps</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> vnodeChildren <span class="token operator">=</span> node<span class="token punctuation">.</span>children<span class="token punctuation">.</span>length</span>
<span class="line">    <span class="token operator">?</span> <span class="token function">buildChildren</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token operator">:</span> <span class="token keyword">undefined</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 生成补丁标志</span></span>
<span class="line">  <span class="token keyword">const</span> patchFlag <span class="token operator">=</span> <span class="token function">getPatchFlag</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 生成动态属性</span></span>
<span class="line">  <span class="token keyword">const</span> dynamicProps <span class="token operator">=</span> <span class="token function">getDynamicProps</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 创建VNode调用</span></span>
<span class="line">  context<span class="token punctuation">.</span><span class="token function">replaceNode</span><span class="token punctuation">(</span></span>
<span class="line">    <span class="token function">createVNodeCall</span><span class="token punctuation">(</span></span>
<span class="line">      context<span class="token punctuation">,</span></span>
<span class="line">      vnodeTag<span class="token punctuation">,</span></span>
<span class="line">      vnodeProps<span class="token punctuation">,</span></span>
<span class="line">      vnodeChildren<span class="token punctuation">,</span></span>
<span class="line">      patchFlag<span class="token punctuation">,</span></span>
<span class="line">      dynamicProps<span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 获取补丁标志</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">getPatchFlag</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ElementNode<span class="token punctuation">,</span> context<span class="token operator">:</span> TransformContext<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">let</span> patchFlag <span class="token operator">=</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 检查动态属性</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> prop <span class="token keyword">of</span> node<span class="token punctuation">.</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">DIRECTIVE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">const</span> dir <span class="token operator">=</span> prop</span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;bind&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">PROPS</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>dir<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;on&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">HYDRATE_EVENTS</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ATTRIBUTE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;class&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">CLASS</span></span>
<span class="line">      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prop<span class="token punctuation">.</span>name <span class="token operator">===</span> <span class="token string">&#39;style&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">STYLE</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 检查动态子节点</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      patchFlag <span class="token operator">|=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">TEXT</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> patchFlag</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-块级优化-block-optimization" tabindex="-1"><a class="header-anchor" href="#_4-块级优化-block-optimization"><span>4. 块级优化 (Block Optimization)</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 块级优化转换器</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> transformBlock<span class="token operator">:</span> <span class="token function-variable function">NodeTransform</span> <span class="token operator">=</span> <span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type <span class="token operator">!==</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 检查是否为块级节点</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasDynamicChildren</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 标记为块级节点</span></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">replaceNode</span><span class="token punctuation">(</span><span class="token function">createBlock</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 检查是否有动态子节点</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">hasDynamicChildren</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ElementNode<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> child <span class="token keyword">of</span> node<span class="token punctuation">.</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>child<span class="token punctuation">.</span>type <span class="token operator">===</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasDynamicProps</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasDynamicChildren</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token boolean">true</span></span>
<span class="line">      <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token boolean">false</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 创建块级节点</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">createBlock</span><span class="token punctuation">(</span>node<span class="token operator">:</span> ElementNode<span class="token punctuation">,</span> context<span class="token operator">:</span> TransformContext<span class="token punctuation">)</span><span class="token operator">:</span> VNodeCall <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> tag<span class="token punctuation">,</span> props<span class="token punctuation">,</span> children <span class="token punctuation">}</span> <span class="token operator">=</span> node</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">createVNodeCall</span><span class="token punctuation">(</span></span>
<span class="line">    context<span class="token punctuation">,</span></span>
<span class="line">    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&quot;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&quot;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">buildProps</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">buildChildren</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">getPatchFlag</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function">getDynamicProps</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// isBlock</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🎨-代码生成-codegen" tabindex="-1"><a class="header-anchor" href="#🎨-代码生成-codegen"><span>🎨 代码生成 (Codegen)</span></a></h2><h3 id="_1-代码生成器" tabindex="-1"><a class="header-anchor" href="#_1-代码生成器"><span>1. 代码生成器</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 代码生成上下文</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CodegenContext</span> <span class="token punctuation">{</span></span>
<span class="line">  source<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  code<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  line<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  column<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  offset<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  indentLevel<span class="token operator">:</span> <span class="token builtin">number</span></span>
<span class="line">  <span class="token function">push</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> node<span class="token operator">?</span><span class="token operator">:</span> Node<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token function">indent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token function">deindent</span><span class="token punctuation">(</span>withoutNewLine<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line">  <span class="token function">newline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 代码生成结果</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CodegenResult</span> <span class="token punctuation">{</span></span>
<span class="line">  code<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  preamble<span class="token operator">:</span> <span class="token builtin">string</span></span>
<span class="line">  ast<span class="token operator">:</span> RootNode</span>
<span class="line">  map<span class="token operator">?</span><span class="token operator">:</span> RawSourceMap</span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 生成代码</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">generate</span><span class="token punctuation">(</span></span>
<span class="line">  ast<span class="token operator">:</span> RootNode<span class="token punctuation">,</span></span>
<span class="line">  options<span class="token operator">:</span> CodegenOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token function">createCodegenContext</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> options<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> mode<span class="token punctuation">,</span> push<span class="token punctuation">,</span> prefixIdentifiers <span class="token punctuation">}</span> <span class="token operator">=</span> context</span>
<span class="line">  <span class="token keyword">const</span> helpers <span class="token operator">=</span> <span class="token builtin">Array</span><span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>helpers<span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">const</span> hasHelpers <span class="token operator">=</span> helpers<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 生成前导代码</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>mode <span class="token operator">===</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">genModulePreamble</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">,</span> <span class="token function">genScopeId</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">genFunctionPreamble</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 生成渲染函数</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>prefixIdentifiers <span class="token operator">&amp;&amp;</span> mode <span class="token operator">===</span> <span class="token string">&#39;module&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;function render(&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">genFunctionArguments</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;) {\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;function render(&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">genFunctionArguments</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;) {\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 生成函数体</span></span>
<span class="line">  <span class="token function">genIndent</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;return &#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>codegenNode<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">genNode</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>codegenNode<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;null&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 结束函数</span></span>
<span class="line">  context<span class="token punctuation">.</span><span class="token function">deindent</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;\\n}&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">return</span> <span class="token punctuation">{</span></span>
<span class="line">    code<span class="token operator">:</span> context<span class="token punctuation">.</span>code<span class="token punctuation">,</span></span>
<span class="line">    preamble<span class="token operator">:</span> context<span class="token punctuation">.</span>preamble<span class="token punctuation">,</span></span>
<span class="line">    ast<span class="token punctuation">,</span></span>
<span class="line">    map<span class="token operator">:</span> context<span class="token punctuation">.</span>map <span class="token operator">?</span> context<span class="token punctuation">.</span>map<span class="token punctuation">.</span><span class="token function">toJSON</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-节点代码生成" tabindex="-1"><a class="header-anchor" href="#_2-节点代码生成"><span>2. 节点代码生成</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 生成节点代码</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token operator">:</span> CodegenNode<span class="token punctuation">,</span> context<span class="token operator">:</span> CodegenContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isString</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">return</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">switch</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">ELEMENT</span><span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">IF</span><span class="token operator">:</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">FOR</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genNode</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>codegenNode<span class="token operator">!</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genText</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">SIMPLE_EXPRESSION</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">INTERPOLATION</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genInterpolation</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">TEXT_CALL</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genTextCall</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMPOUND_EXPRESSION</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genCompoundExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">COMMENT</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genComment</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">VNODE_CALL</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genVNodeCall</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_CALL_EXPRESSION</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genCallExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_OBJECT_EXPRESSION</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genObjectExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_PROPERTY</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genProperty</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_ARRAY_EXPRESSION</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genArrayExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_FUNCTION_EXPRESSION</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genFunctionExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_CONDITIONAL_EXPRESSION</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genConditionalExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_CACHE_EXPRESSION</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genCacheExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_BLOCK_STATEMENT</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genBlockStatement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_TEMPLATE_LITERAL</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genTemplateLiteral</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_IF_STATEMENT</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genIfStatement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_ASSIGNMENT_EXPRESSION</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genAssignmentExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_SEQUENCE_EXPRESSION</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genSequenceExpression</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">    <span class="token keyword">case</span> NodeTypes<span class="token punctuation">.</span><span class="token constant">JS_RETURN_STATEMENT</span><span class="token operator">:</span></span>
<span class="line">      <span class="token function">genReturnStatement</span><span class="token punctuation">(</span>node<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      <span class="token keyword">break</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 生成VNode调用</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">genVNodeCall</span><span class="token punctuation">(</span>node<span class="token operator">:</span> VNodeCall<span class="token punctuation">,</span> context<span class="token operator">:</span> CodegenContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span> push<span class="token punctuation">,</span> helper<span class="token punctuation">,</span> pure <span class="token punctuation">}</span> <span class="token operator">=</span> context</span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">{</span></span>
<span class="line">    tag<span class="token punctuation">,</span></span>
<span class="line">    props<span class="token punctuation">,</span></span>
<span class="line">    children<span class="token punctuation">,</span></span>
<span class="line">    patchFlag<span class="token punctuation">,</span></span>
<span class="line">    dynamicProps<span class="token punctuation">,</span></span>
<span class="line">    directives<span class="token punctuation">,</span></span>
<span class="line">    isBlock<span class="token punctuation">,</span></span>
<span class="line">    disableTracking<span class="token punctuation">,</span></span>
<span class="line">    isComponent<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token operator">=</span> node</span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>directives<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">WITH_DIRECTIVES</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>isBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">OPEN_BLOCK</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>disableTracking <span class="token operator">?</span> <span class="token string">&#39;true&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">), </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>pure<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token constant">PURE_ANNOTATION</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>isComponent<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">RESOLVE_COMPONENT</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>tag<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">genNode</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, null&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isArray</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">genNodeList</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">genNode</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, null&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">!==</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span> <span class="token operator">+</span> <span class="token function">String</span><span class="token punctuation">(</span>patchFlag<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicProps<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span> <span class="token operator">+</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>dynamicProps<span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>isBlock<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>directives<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">genNode</span><span class="token punctuation">(</span>directives<span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-优化代码生成" tabindex="-1"><a class="header-anchor" href="#_3-优化代码生成"><span>3. 优化代码生成</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 生成优化代码</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">genOptimizedCode</span><span class="token punctuation">(</span>ast<span class="token operator">:</span> RootNode<span class="token punctuation">,</span> context<span class="token operator">:</span> CodegenContext<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 生成静态提升</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>hoists<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;const &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ast<span class="token punctuation">.</span>hoists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span></span>
<span class="line">      context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_hoisted_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39; = &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ast<span class="token punctuation">.</span>hoists<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">genNode</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>hoists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 生成缓存</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>ast<span class="token punctuation">.</span>cached<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;const &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ast<span class="token punctuation">.</span>cached<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span></span>
<span class="line">      context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">_cached_</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39; = &#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ast<span class="token punctuation">.</span>cached<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;, &#39;</span><span class="token punctuation">)</span></span>
<span class="line">      context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">helper</span><span class="token punctuation">(</span><span class="token constant">CACHE</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span></span>
<span class="line">      <span class="token function">genNode</span><span class="token punctuation">(</span>ast<span class="token punctuation">.</span>cached<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span></span>
<span class="line">      context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;)&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    context<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🔧-编译器优化" tabindex="-1"><a class="header-anchor" href="#🔧-编译器优化"><span>🔧 编译器优化</span></a></h2><h3 id="_1-编译时优化" tabindex="-1"><a class="header-anchor" href="#_1-编译时优化"><span>1. 编译时优化</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 编译器选项</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">CompilerOptions</span> <span class="token punctuation">{</span></span>
<span class="line">  mode<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;module&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;function&#39;</span> <span class="token comment">// 编译模式</span></span>
<span class="line">  prefixIdentifiers<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token comment">// 前缀标识符</span></span>
<span class="line">  hoistStatic<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token comment">// 静态提升</span></span>
<span class="line">  cacheHandlers<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token comment">// 缓存处理器</span></span>
<span class="line">  scopeId<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span> <span class="token comment">// 作用域ID</span></span>
<span class="line">  slotted<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token comment">// 插槽</span></span>
<span class="line">  ssr<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token comment">// 服务端渲染</span></span>
<span class="line">  isNativeTag<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>tag<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">boolean</span> <span class="token comment">// 原生标签检查</span></span>
<span class="line">  isBuiltInComponent<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>tag<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">symbol</span> <span class="token operator">|</span> <span class="token keyword">void</span> <span class="token comment">// 内置组件检查</span></span>
<span class="line">  delimiters<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token punctuation">]</span> <span class="token comment">// 分隔符</span></span>
<span class="line">  comments<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token comment">// 保留注释</span></span>
<span class="line">  whitespace<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;preserve&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;condense&#39;</span> <span class="token comment">// 空白处理</span></span>
<span class="line">  bindingMetadata<span class="token operator">?</span><span class="token operator">:</span> BindingMetadata <span class="token comment">// 绑定元数据</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 编译优化</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">compile</span><span class="token punctuation">(</span></span>
<span class="line">  source<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> RootNode<span class="token punctuation">,</span></span>
<span class="line">  options<span class="token operator">:</span> CompilerOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token operator">:</span> CodegenResult <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">const</span> ast <span class="token operator">=</span> <span class="token function">isString</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">baseParse</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> options<span class="token punctuation">)</span> <span class="token operator">:</span> source</span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 应用转换</span></span>
<span class="line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>nodeTransforms<span class="token punctuation">,</span> directiveTransforms<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">getBaseTransformPreset</span><span class="token punctuation">(</span></span>
<span class="line">    options<span class="token punctuation">.</span>prefixIdentifiers<span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token function">transform</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span>options<span class="token punctuation">,</span></span>
<span class="line">    nodeTransforms<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span>nodeTransforms<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>nodeTransforms <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">    directiveTransforms<span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token operator">...</span>directiveTransforms<span class="token punctuation">,</span></span>
<span class="line">      <span class="token operator">...</span><span class="token punctuation">(</span>options<span class="token punctuation">.</span>directiveTransforms <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">  <span class="token comment">// 生成代码</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token function">generate</span><span class="token punctuation">(</span>ast<span class="token punctuation">,</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token operator">...</span>options<span class="token punctuation">,</span></span>
<span class="line">    mode<span class="token operator">:</span> options<span class="token punctuation">.</span>mode <span class="token operator">||</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-运行时优化" tabindex="-1"><a class="header-anchor" href="#_2-运行时优化"><span>2. 运行时优化</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 运行时优化标志</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token keyword">enum</span> RuntimeFlags <span class="token punctuation">{</span></span>
<span class="line">  <span class="token constant">OPEN_BLOCK</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">CREATE_ELEMENT_VNODE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">CREATE_VNODE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">CREATE_COMMENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">CREATE_TEXT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">CREATE_STATIC</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">RESOLVE_COMPONENT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">6</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">RESOLVE_DIRECTIVE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">7</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">WITH_DIRECTIVES</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">RENDER_LIST</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">9</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">RENDER_SLOT</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">10</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">TO_STRING</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">11</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">TO_DISPLAY_STRING</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">12</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">INTERPOLATE</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">13</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">SET_BLOCK_TRACKING</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">14</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">PUSH_SCOPE_ID</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">15</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">POP_SCOPE_ID</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">WITH_CTX</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">17</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">UNREF</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">18</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">IS_REF</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">19</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">WITH_MEMO</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">20</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token constant">IS_MEMO_SAME</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">21</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 运行时助手</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> helperNameMap<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">symbol</span><span class="token punctuation">,</span> <span class="token builtin">string</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">OPEN_BLOCK</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;openBlock&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">CREATE_ELEMENT_VNODE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;createElementVNode&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">CREATE_VNODE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;createVNode&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">CREATE_COMMENT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;createCommentVNode&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">CREATE_TEXT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;createTextVNode&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">CREATE_STATIC</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;createStaticVNode&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">RESOLVE_COMPONENT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;resolveComponent&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">RESOLVE_DIRECTIVE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;resolveDirective&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">WITH_DIRECTIVES</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;withDirectives&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">RENDER_LIST</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;renderList&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">RENDER_SLOT</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;renderSlot&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">TO_STRING</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;toString&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">TO_DISPLAY_STRING</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;toDisplayString&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">INTERPOLATE</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;interpolate&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">SET_BLOCK_TRACKING</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;setBlockTracking&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">PUSH_SCOPE_ID</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;pushScopeId&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">POP_SCOPE_ID</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;popScopeId&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">WITH_CTX</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;withCtx&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">UNREF</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;unref&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">IS_REF</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;isRef&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">WITH_MEMO</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;withMemo&#39;</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token punctuation">[</span><span class="token constant">IS_MEMO_SAME</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;isMemoSame&#39;</span><span class="token punctuation">,</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="📊-性能优化" tabindex="-1"><a class="header-anchor" href="#📊-性能优化"><span>📊 性能优化</span></a></h2><h3 id="_1-编译时优化策略" tabindex="-1"><a class="header-anchor" href="#_1-编译时优化策略"><span>1. 编译时优化策略</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 静态提升优化</span></span>
<span class="line"><span class="token keyword">const</span> hoisted <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createVNode</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;static&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 补丁标志优化</span></span>
<span class="line"><span class="token keyword">const</span> patchFlag <span class="token operator">=</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">CLASS</span> <span class="token operator">|</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">STYLE</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 块级优化</span></span>
<span class="line"><span class="token keyword">const</span> dynamicChildren <span class="token operator">=</span> <span class="token punctuation">[</span>dynamicVNode1<span class="token punctuation">,</span> dynamicVNode2<span class="token punctuation">]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 缓存优化</span></span>
<span class="line"><span class="token keyword">const</span> cached <span class="token operator">=</span> <span class="token function">_cache</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">expensiveComputation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-运行时优化策略" tabindex="-1"><a class="header-anchor" href="#_2-运行时优化策略"><span>2. 运行时优化策略</span></a></h3><div class="language-typescript line-numbers-mode" data-highlighter="prismjs" data-ext="ts"><pre><code><span class="line"><span class="token comment">// 快速路径检查</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 有补丁标志，进行优化更新</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">&amp;</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">CLASS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 只更新类名</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line">  <span class="token keyword">if</span> <span class="token punctuation">(</span>patchFlag <span class="token operator">&amp;</span> PatchFlags<span class="token punctuation">.</span><span class="token constant">STYLE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 只更新样式</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 无补丁标志，全量更新</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 块级更新</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>dynamicChildren<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token comment">// 只更新动态子节点</span></span>
<span class="line">  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dynamicChildren<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">patch</span><span class="token punctuation">(</span>dynamicChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> newDynamicChildren<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="🎯-总结" tabindex="-1"><a class="header-anchor" href="#🎯-总结"><span>🎯 总结</span></a></h2><p>Vue3的编译器系统展现了现代前端框架的设计精髓：</p><ol><li><strong>高效解析</strong> - 词法分析 + 语法分析 + AST生成</li><li><strong>智能转换</strong> - 静态提升 + 补丁标志 + 块级优化</li><li><strong>优化生成</strong> - 渲染函数 + 优化代码 + 源码映射</li><li><strong>编译时优化</strong> - 多种优化策略组合</li><li><strong>运行时优化</strong> - 快速路径 + 块级更新</li><li><strong>跨平台支持</strong> - 模块化 + 可扩展</li></ol><p>这套编译器系统不仅为Vue3提供了高效的编译能力，也为其他前端项目提供了优秀的设计参考。</p>`,42)]))}const i=s(e,[["render",o]]),u=JSON.parse('{"path":"/04-compiler-system.html","title":"Vue3编译器系统详解","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"🎯 编译器概述","slug":"🎯-编译器概述","link":"#🎯-编译器概述","children":[{"level":3,"title":"编译器架构图","slug":"编译器架构图","link":"#编译器架构图","children":[]}]},{"level":2,"title":"🔍 解析阶段 (Parse)","slug":"🔍-解析阶段-parse","link":"#🔍-解析阶段-parse","children":[{"level":3,"title":"1. 词法分析 (Lexical Analysis)","slug":"_1-词法分析-lexical-analysis","link":"#_1-词法分析-lexical-analysis","children":[]},{"level":3,"title":"2. 语法分析 (Syntax Analysis)","slug":"_2-语法分析-syntax-analysis","link":"#_2-语法分析-syntax-analysis","children":[]},{"level":3,"title":"3. AST节点类型","slug":"_3-ast节点类型","link":"#_3-ast节点类型","children":[]}]},{"level":2,"title":"🔄 转换阶段 (Transform)","slug":"🔄-转换阶段-transform","link":"#🔄-转换阶段-transform","children":[{"level":3,"title":"1. 转换器架构","slug":"_1-转换器架构","link":"#_1-转换器架构","children":[]},{"level":3,"title":"2. 静态提升 (Static Hoisting)","slug":"_2-静态提升-static-hoisting","link":"#_2-静态提升-static-hoisting","children":[]},{"level":3,"title":"3. 补丁标志 (Patch Flags)","slug":"_3-补丁标志-patch-flags","link":"#_3-补丁标志-patch-flags","children":[]},{"level":3,"title":"4. 块级优化 (Block Optimization)","slug":"_4-块级优化-block-optimization","link":"#_4-块级优化-block-optimization","children":[]}]},{"level":2,"title":"🎨 代码生成 (Codegen)","slug":"🎨-代码生成-codegen","link":"#🎨-代码生成-codegen","children":[{"level":3,"title":"1. 代码生成器","slug":"_1-代码生成器","link":"#_1-代码生成器","children":[]},{"level":3,"title":"2. 节点代码生成","slug":"_2-节点代码生成","link":"#_2-节点代码生成","children":[]},{"level":3,"title":"3. 优化代码生成","slug":"_3-优化代码生成","link":"#_3-优化代码生成","children":[]}]},{"level":2,"title":"🔧 编译器优化","slug":"🔧-编译器优化","link":"#🔧-编译器优化","children":[{"level":3,"title":"1. 编译时优化","slug":"_1-编译时优化","link":"#_1-编译时优化","children":[]},{"level":3,"title":"2. 运行时优化","slug":"_2-运行时优化","link":"#_2-运行时优化","children":[]}]},{"level":2,"title":"📊 性能优化","slug":"📊-性能优化","link":"#📊-性能优化","children":[{"level":3,"title":"1. 编译时优化策略","slug":"_1-编译时优化策略","link":"#_1-编译时优化策略","children":[]},{"level":3,"title":"2. 运行时优化策略","slug":"_2-运行时优化策略","link":"#_2-运行时优化策略","children":[]}]},{"level":2,"title":"🎯 总结","slug":"🎯-总结","link":"#🎯-总结","children":[]}],"git":{"updatedTime":1754567332000,"contributors":[{"name":"atian","username":"atian","email":"atian@micous.com","commits":1,"url":"https://github.com/atian"}],"changelog":[{"hash":"fc80bf956ce2f65021db3835863d30f81c328ee4","time":1754567332000,"email":"atian@micous.com","author":"atian","message":"更新GitHub Actions文档，添加代码块格式化，补充相关链接，并在VuePress配置中新增Vue3核心知识的导航和侧边栏，优化页面路由设置。"}]},"filePathRelative":"04-compiler-system.md"}');export{i as comp,u as data};
